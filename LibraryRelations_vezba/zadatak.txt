📝 Zadatak: Mini projekat Biblioteka
1. Napravi sledeće tabele:

authors ✅

id ✅

name ✅

birth_year ✅

created_at, updated_at ✅

[DONE]  ✅
---------------------------------------------------------------

books ✅

id ✅

title (unique) ✅

published_year ✅

author_id (FK → authors.id) ✅

created_at, updated_at ✅

[DONE] ✅

---------------------------------------------------------------
members ✅

id ✅

name ✅

email (unique) ✅

created_at, updated_at ✅
---------------------------------------------------------------
loans (zajmovi knjiga) ✅

id

book_id (FK → books.id) ✅

member_id (FK → members.id) ✅

loan_date ✅

return_date (nullable – ako knjiga još nije vraćena) ✅

created_at, updated_at ✅
---------------------------------------------------------------

2. Relacije (Eloquent modeli):

Author:

hasMany(Book::class)
---------------------------------------------------------------

Book:

belongsTo(Author::class) ✅

hasMany(Loan::class) ✅
---------------------------------------------------------------

Member:

hasMany(Loan::class) ✅
---------------------------------------------------------------

Loan:

belongsTo(Book::class) ✅

belongsTo(Member::class) ✅
---------------------------------------------------------------

3. Seederi:

Ubaci 5 autora ✅, svakom 2–3 knjige. ✅

Ubaci 5 članova. ✅

Ubaci 5–10 zajmova (neke sa return_date = null, da simuliraš da knjiga još nije vraćena). ✅
---------------------------------------------------------------

4. Upiti koje treba da probaš:

Pronađi sve knjige određenog autora: ✅

Author::find(1)->books; ✅


Pronađi sve knjige koje je član sa ID=2 iznajmio: ✅

Member::find(2)->loans()->with('book')->get(); ✅


Izlistaj sve članove koji trenutno imaju neku knjigu kod sebe (return_date = null). ✅

Izlistaj sve autore koji su napisali knjigu posuđenu barem jednom. ✅

Dodaj novu pozajmicu (Loan::create). ✅

👉 Ovde ćeš vežbati one-to-many i many-to-one (a indirektno i “many-to-many” kroz loans, jer jedan član može pozajmiti više knjiga i jedna knjiga može biti pozajmljena više puta).
